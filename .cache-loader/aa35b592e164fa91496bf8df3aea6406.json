{"remainingRequest":"/Users/Brogan/Documents/sus/sustainability_map/node_modules/thread-loader/dist/cjs.js!/Users/Brogan/Documents/sus/sustainability_map/node_modules/babel-loader/lib/index.js!/Users/Brogan/Documents/sus/sustainability_map/node_modules/eslint-loader/index.js??ref--13-0!/Users/Brogan/Documents/sus/sustainability_map/src/assets/SMFeature.js","dependencies":[{"path":"/Users/Brogan/Documents/sus/sustainability_map/src/assets/SMFeature.js","mtime":1553653406774},{"path":"/Users/Brogan/Documents/sus/sustainability_map/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Brogan/Documents/sus/sustainability_map/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Brogan/Documents/sus/sustainability_map/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Brogan/Documents/sus/sustainability_map/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Brogan/Documents/sus/sustainability_map/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Brogan/Documents/sus/sustainability_map/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.match\";\nimport _getIterator from \"/Users/Brogan/Documents/sus/sustainability_map/node_modules/@babel/runtime-corejs2/core-js/get-iterator\";\nimport _classCallCheck from \"/Users/Brogan/Documents/sus/sustainability_map/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Brogan/Documents/sus/sustainability_map/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n\n/**\n * @Author: Brogan Miner <Brogan>\n * @Date:   2019-03-26T10:46:59-07:00\n * @Email:  brogan.miner@oregonstate.edu\n * @Last modified by:   Brogan\n * @Last modified time: 2019-03-26T19:23:26-07:00\n */\nimport L from 'leaflet';\n\nvar SMFeature =\n/*#__PURE__*/\nfunction () {\n  function SMFeature(name, items, color) {\n    _classCallCheck(this, SMFeature);\n\n    this.items = []; // { Name, description, geometry }\n\n    this.name = name; // string\n\n    this.color = color;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(items), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var item = _step.value;\n        this.addItem(item);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  _createClass(SMFeature, [{\n    key: \"addItem\",\n    value: function addItem(item) {\n      try {\n        L.geoJSON(item);\n        item.properties.color = this.color;\n        this.items.push(item);\n      } catch (err) {// bad item\n      }\n    }\n  }, {\n    key: \"queryItems\",\n    value: function queryItems(query) {\n      if (this.name.match(query)) {\n        return this.items;\n      }\n\n      console.log(this);\n      var queryReturn = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = _getIterator(this.items), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var item = _step2.value;\n\n          if (item.properties.Name.match(query) || item.properties.description && item.properties.description.match(query)) {\n            queryReturn.push(item);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return queryReturn;\n    }\n  }]);\n\n  return SMFeature;\n}();\n\nexport default SMFeature;",{"version":3,"sources":["/Users/Brogan/Documents/sus/sustainability_map/src/assets/SMFeature.js"],"names":["L","SMFeature","name","items","color","item","addItem","geoJSON","properties","push","err","query","match","console","log","queryReturn","Name","description"],"mappings":";;;;;;AAAA;;;;;;;AAQA,OAAOA,CAAP,MAAc,SAAd;;IAEMC,S;;;AACJ,qBAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,KAA1B,EAAiC;AAAA;;AAC/B,SAAKD,KAAL,GAAa,EAAb,CAD+B,CACf;;AAChB,SAAKD,IAAL,GAAYA,IAAZ,CAF+B,CAEd;;AACjB,SAAKE,KAAL,GAAaA,KAAb;AAH+B;AAAA;AAAA;;AAAA;AAI/B,wCAAiBD,KAAjB,4GAAwB;AAAA,YAAfE,IAAe;AACtB,aAAKC,OAAL,CAAaD,IAAb;AACD;AAN8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOhC;;;;4BAEQA,I,EAAM;AACb,UAAI;AACFL,QAAAA,CAAC,CAACO,OAAF,CAAUF,IAAV;AACAA,QAAAA,IAAI,CAACG,UAAL,CAAgBJ,KAAhB,GAAwB,KAAKA,KAA7B;AACA,aAAKD,KAAL,CAAWM,IAAX,CAAgBJ,IAAhB;AACD,OAJD,CAIE,OAAOK,GAAP,EAAY,CACZ;AACD;AACF;;;+BAEWC,K,EAAO;AACjB,UAAI,KAAKT,IAAL,CAAUU,KAAV,CAAgBD,KAAhB,CAAJ,EAA4B;AAC1B,eAAO,KAAKR,KAAZ;AACD;;AACDU,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,UAAIC,WAAW,GAAG,EAAlB;AALiB;AAAA;AAAA;;AAAA;AAMjB,2CAAiB,KAAKZ,KAAtB,iHAA6B;AAAA,cAApBE,IAAoB;;AAC3B,cAAIA,IAAI,CAACG,UAAL,CAAgBQ,IAAhB,CAAqBJ,KAArB,CAA2BD,KAA3B,KAAsCN,IAAI,CAACG,UAAL,CAAgBS,WAAhB,IAA+BZ,IAAI,CAACG,UAAL,CAAgBS,WAAhB,CAA4BL,KAA5B,CAAkCD,KAAlC,CAAzE,EAAoH;AAClHI,YAAAA,WAAW,CAACN,IAAZ,CAAiBJ,IAAjB;AACD;AACF;AAVgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYjB,aAAOU,WAAP;AACD;;;;;;AAGH,eAAed,SAAf","sourcesContent":["/**\n * @Author: Brogan Miner <Brogan>\n * @Date:   2019-03-26T10:46:59-07:00\n * @Email:  brogan.miner@oregonstate.edu\n * @Last modified by:   Brogan\n * @Last modified time: 2019-03-26T19:23:26-07:00\n */\n\nimport L from 'leaflet'\n\nclass SMFeature {\n  constructor (name, items, color) {\n    this.items = [] // { Name, description, geometry }\n    this.name = name // string\n    this.color = color\n    for (let item of items) {\n      this.addItem(item)\n    }\n  }\n\n  addItem (item) {\n    try {\n      L.geoJSON(item)\n      item.properties.color = this.color\n      this.items.push(item)\n    } catch (err) {\n      // bad item\n    }\n  }\n\n  queryItems (query) {\n    if (this.name.match(query)) {\n      return this.items\n    }\n    console.log(this)\n    let queryReturn = []\n    for (let item of this.items) {\n      if (item.properties.Name.match(query) || (item.properties.description && item.properties.description.match(query))) {\n        queryReturn.push(item)\n      }\n    }\n\n    return queryReturn\n  }\n}\n\nexport default SMFeature\n"]}]}