{"remainingRequest":"/Users/Brogan/Documents/sus/sustainability_map/node_modules/thread-loader/dist/cjs.js!/Users/Brogan/Documents/sus/sustainability_map/node_modules/babel-loader/lib/index.js!/Users/Brogan/Documents/sus/sustainability_map/node_modules/eslint-loader/index.js??ref--13-0!/Users/Brogan/Documents/sus/sustainability_map/src/store/Locations/locations.js","dependencies":[{"path":"/Users/Brogan/Documents/sus/sustainability_map/src/store/Locations/locations.js","mtime":1553730468933},{"path":"/Users/Brogan/Documents/sus/sustainability_map/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Brogan/Documents/sus/sustainability_map/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Brogan/Documents/sus/sustainability_map/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Brogan/Documents/sus/sustainability_map/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Brogan/Documents/sus/sustainability_map/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Brogan/Documents/sus/sustainability_map/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport _Promise from \"/Users/Brogan/Documents/sus/sustainability_map/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/Brogan/Documents/sus/sustainability_map/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.array.find\";\nimport _getIterator from \"/Users/Brogan/Documents/sus/sustainability_map/node_modules/@babel/runtime-corejs2/core-js/get-iterator\";\n\n/**\n * @Author: Brogan Miner <Brogan>\n * @Date:   2019-03-26T10:38:55-07:00\n * @Email:  brogan.miner@oregonstate.edu\n * @Last modified by:   Brogan\n * @Last modified time: 2019-03-27T16:47:48-07:00\n */\nimport API from '@/API/api.js';\nimport SMFeature from '@/assets/SMFeature.js';\nimport SMBuilding from '@/assets/SMBuilding.js';\nimport L from 'leaflet';\nvar state = {\n  features: [],\n  //  Of type SMFeature\n  buildings: []\n};\nvar getters = {\n  queryFeatures: function queryFeatures(state) {\n    return function (query) {\n      var matchedItems = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(state.features), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var feature = _step.value;\n          matchedItems = matchedItems.concat(feature.queryItems(query));\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return matchedItems;\n    };\n  },\n  queryFeaturesByBounds: function queryFeaturesByBounds(state) {\n    return function (bounds, features) {\n      return features.reduce(function (accm, feature) {\n        if (bounds.contains(L.geoJSON(feature).getBounds().getCenter())) {\n          accm.push(feature);\n        }\n\n        return accm;\n      }, []);\n    };\n  },\n  queryBuildings: function queryBuildings(state) {\n    return function (queryString) {\n      return state.buildings.reduce(function (accm, building) {\n        if (building.query(queryString)) {\n          accm.push(building);\n        }\n\n        return accm;\n      }, []);\n    };\n  },\n  queryBuildingFeatures: function queryBuildingFeatures(state, getters) {\n    return function (buildingID) {\n      var building = state.buildings.find(function (el) {\n        return el.properties.id === buildingID;\n      });\n      return getters.queryFeaturesByBounds(L.geoJSON(building).getBounds());\n    };\n  }\n};\nvar mutations = {\n  addFeature: function addFeature(state, feature) {\n    state.features.push(feature);\n  },\n  addBuilding: function addBuilding(state, building) {\n    try {\n      L.geoJSON(building);\n      state.buildings.push(building);\n    } catch (err) {// Do nothing for bad json\n    }\n  }\n};\nvar actions = {\n  loadAllFeatures: function () {\n    var _loadAllFeatures = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(_ref, payload) {\n      var dispatch, commit, getters, features, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, feature;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch = _ref.dispatch, commit = _ref.commit, getters = _ref.getters;\n              _context.next = 3;\n              return API.features();\n\n            case 3:\n              features = _context.sent;\n              _iteratorNormalCompletion2 = true;\n              _didIteratorError2 = false;\n              _iteratorError2 = undefined;\n              _context.prev = 7;\n\n              for (_iterator2 = _getIterator(features); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                feature = _step2.value;\n                commit('addFeature', new SMFeature(feature.name, feature.items, feature.color));\n              }\n\n              _context.next = 15;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](7);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context.t0;\n\n            case 15:\n              _context.prev = 15;\n              _context.prev = 16;\n\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n\n            case 18:\n              _context.prev = 18;\n\n              if (!_didIteratorError2) {\n                _context.next = 21;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 21:\n              return _context.finish(18);\n\n            case 22:\n              return _context.finish(15);\n\n            case 23:\n              return _context.abrupt(\"return\", _Promise.resolve());\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[7, 11, 15, 23], [16,, 18, 22]]);\n    }));\n\n    function loadAllFeatures(_x, _x2) {\n      return _loadAllFeatures.apply(this, arguments);\n    }\n\n    return loadAllFeatures;\n  }(),\n  loadAllBuildings: function () {\n    var _loadAllBuildings = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee2(_ref2, pawload) {\n      var dispatch, commit, getters, buildings, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, buildingJSON, building;\n\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch = _ref2.dispatch, commit = _ref2.commit, getters = _ref2.getters;\n              _context2.next = 3;\n              return API.buildings();\n\n            case 3:\n              buildings = _context2.sent;\n              _iteratorNormalCompletion3 = true;\n              _didIteratorError3 = false;\n              _iteratorError3 = undefined;\n              _context2.prev = 7;\n              _iterator3 = _getIterator(buildings);\n\n            case 9:\n              if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {\n                _context2.next = 22;\n                break;\n              }\n\n              buildingJSON = _step3.value;\n              building = new SMBuilding(buildingJSON);\n              _context2.prev = 12;\n\n              if (getters.queryFeaturesByBounds(L.geoJSON(building).getBounds(), getters.queryFeatures(/.*/)).length > 0) {\n                commit('addBuilding', building);\n              }\n\n              _context2.next = 19;\n              break;\n\n            case 16:\n              _context2.prev = 16;\n              _context2.t0 = _context2[\"catch\"](12);\n              return _context2.abrupt(\"continue\", 19);\n\n            case 19:\n              _iteratorNormalCompletion3 = true;\n              _context2.next = 9;\n              break;\n\n            case 22:\n              _context2.next = 28;\n              break;\n\n            case 24:\n              _context2.prev = 24;\n              _context2.t1 = _context2[\"catch\"](7);\n              _didIteratorError3 = true;\n              _iteratorError3 = _context2.t1;\n\n            case 28:\n              _context2.prev = 28;\n              _context2.prev = 29;\n\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n\n            case 31:\n              _context2.prev = 31;\n\n              if (!_didIteratorError3) {\n                _context2.next = 34;\n                break;\n              }\n\n              throw _iteratorError3;\n\n            case 34:\n              return _context2.finish(31);\n\n            case 35:\n              return _context2.finish(28);\n\n            case 36:\n              return _context2.abrupt(\"return\", _Promise.resolve());\n\n            case 37:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[7, 24, 28, 36], [12, 16], [29,, 31, 35]]);\n    }));\n\n    function loadAllBuildings(_x3, _x4) {\n      return _loadAllBuildings.apply(this, arguments);\n    }\n\n    return loadAllBuildings;\n  }()\n};\nexport default {\n  state: state,\n  mutations: mutations,\n  getters: getters,\n  actions: actions\n};",{"version":3,"sources":["/Users/Brogan/Documents/sus/sustainability_map/src/store/Locations/locations.js"],"names":["API","SMFeature","SMBuilding","L","state","features","buildings","getters","queryFeatures","query","matchedItems","feature","concat","queryItems","queryFeaturesByBounds","bounds","reduce","accm","contains","geoJSON","getBounds","getCenter","push","queryBuildings","queryString","building","queryBuildingFeatures","buildingID","find","el","properties","id","mutations","addFeature","addBuilding","err","actions","loadAllFeatures","payload","dispatch","commit","name","items","color","resolve","loadAllBuildings","pawload","buildingJSON","length"],"mappings":"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","sourcesContent":["/**\n * @Author: Brogan Miner <Brogan>\n * @Date:   2019-03-26T10:38:55-07:00\n * @Email:  brogan.miner@oregonstate.edu\n * @Last modified by:   Brogan\n * @Last modified time: 2019-03-27T16:47:48-07:00\n */\n\nimport API from '@/API/api.js'\nimport SMFeature from '@/assets/SMFeature.js'\nimport SMBuilding from '@/assets/SMBuilding.js'\nimport L from 'leaflet'\n\nconst state = {\n  features: [], //  Of type SMFeature\n  buildings: []\n}\n\nconst getters = {\n  queryFeatures: state => query => {\n    let matchedItems = []\n    for (let feature of state.features) {\n      matchedItems = matchedItems.concat(feature.queryItems(query))\n    }\n    return matchedItems\n  },\n  queryFeaturesByBounds: state => (bounds, features) => {\n    return features.reduce((accm, feature) => {\n      if (bounds.contains(L.geoJSON(feature).getBounds().getCenter())) {\n        accm.push(feature)\n      }\n      return accm\n    }, [])\n  },\n  queryBuildings: state => queryString => {\n    return state.buildings.reduce((accm, building) => {\n      if (building.query(queryString)) {\n        accm.push(building)\n      }\n      return accm\n    }, [])\n  },\n  queryBuildingFeatures: (state, getters) => buildingID => {\n    let building = state.buildings.find(el => {\n      return el.properties.id === buildingID\n    })\n    return getters.queryFeaturesByBounds(L.geoJSON(building).getBounds())\n  }\n}\n\nconst mutations = {\n  addFeature: (state, feature) => {\n    state.features.push(feature)\n  },\n  addBuilding: (state, building) => {\n    try {\n      L.geoJSON(building)\n      state.buildings.push(building)\n    } catch (err) {\n      // Do nothing for bad json\n    }\n  }\n}\n\nconst actions = {\n  loadAllFeatures: async ({ dispatch, commit, getters }, payload) => {\n    let features = await API.features()\n    for (let feature of features) {\n      commit('addFeature', new SMFeature(feature.name, feature.items, feature.color))\n    }\n    return Promise.resolve()\n  },\n  loadAllBuildings: async ({ dispatch, commit, getters }, pawload) => {\n    let buildings = await API.buildings()\n    for (let buildingJSON of buildings) {\n      let building = new SMBuilding(buildingJSON)\n      try {\n        if (getters.queryFeaturesByBounds(L.geoJSON(building).getBounds(), getters.queryFeatures(/.*/)).length > 0) {\n          commit('addBuilding', building)\n        }\n      } catch (err) {\n        continue\n      }\n    }\n    return Promise.resolve()\n  }\n}\n\nexport default {\n  state,\n  mutations,\n  getters,\n  actions\n}\n"]}]}